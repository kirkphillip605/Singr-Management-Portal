/// file: prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  schemas  = ["public"]
}

/* ============================================
   ENUMS
   ============================================ */

enum ApiKeyStatus {
  active
  revoked
  expired
  suspended

  @@map("apikeystatus")
  @@schema("public")
}

enum PricingType {
  one_time
  recurring

  @@map("pricingtype")
  @@schema("public")
}

enum PricingInterval {
  day
  week
  month
  year

  @@map("pricinginterval")
  @@schema("public")
}

/* ============================================
   CORE AUTH / SESSION
   ============================================ */

model SingrUser {
  id                String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid @map("singr_users_id")
  fusionauthUserId  String?      @unique @map("fusionauth_user_id") @db.Uuid
  name              String
  email             String       @unique
  emailVerified     DateTime?    @map("email_verified") @db.Timestamptz(6)
  image             String?
  phoneNumber       String?      @map("phone_number")
  createdAt         DateTime     @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt         DateTime     @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)

  adminProfile      AdminProfile?
  customerProfile   CustomerProfile?
  singerProfile     SingerProfile?
  sessions          Session[]

  @@index([email], map: "idx_singr_users_email")
  @@map("singr_users")
  @@schema("public")
}

model AdminProfile {
  id          String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid @map("admin_profiles_id")
  singrUserId String       @unique @map("singr_users_id") @db.Uuid
  adminLevel  String       @map("admin_level")
  createdAt   DateTime     @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt   DateTime     @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)

  singrUser   SingrUser    @relation(fields: [singrUserId], references: [id], onUpdate: Cascade, onDelete: Cascade)

  @@map("admin_profiles")
  @@schema("public")
}

model CustomerProfile {
  id               String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid @map("customer_profiles_id")
  singrUserId      String       @unique @map("singr_users_id") @db.Uuid
  businessName     String?      @map("business_name")
  stripeCustomerId String?      @unique @map("stripe_customer_id")
  createdAt        DateTime     @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt        DateTime     @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)

  singrUser        SingrUser    @relation(fields: [singrUserId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  apiKeys          ApiKey[]
  customers        Customer[]
  venues           Venue[]
  systems          System[]
  songDb           SongDb[]
  state            State?
  subscriptions    Subscription[]

  @@map("customer_profiles")
  @@schema("public")
}

model SingerProfile {
  id          String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid @map("singer_profiles_id")
  singrUserId String       @unique @map("singr_users_id") @db.Uuid
  nickname    String?
  createdAt   DateTime     @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt   DateTime     @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)

  singrUser   SingrUser    @relation(fields: [singrUserId], references: [id], onUpdate: Cascade, onDelete: Cascade)

  @@map("singer_profiles")
  @@schema("public")
}

model Session {
  id           String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid @map("sessions_id")
  sessionToken String    @unique @map("session_token")
  singrUserId  String    @map("singr_users_id") @db.Uuid
  expiresAt    DateTime  @map("expires_at") @db.Timestamptz(6)
  createdAt    DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt    DateTime  @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)

  singrUser    SingrUser @relation(fields: [singrUserId], references: [id], onUpdate: Cascade, onDelete: Cascade)

  @@map("sessions")
  @@schema("public")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime @db.Timestamptz(6)
  createdAt  DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt  DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)

  @@id([identifier, token])
  @@index([expires], map: "idx_verification_tokens_expires")
  @@map("verification_tokens")
  @@schema("public")
}

/* ============================================
   BILLING / STRIPE
   ============================================ */

model Customer {
  id                  String           @id @db.Uuid @map("customers_id")
  stripeCustomerId    String           @unique @map("stripe_customer_id")
  customerProfileId   String           @map("customer_profiles_id") @db.Uuid
  createdAt           DateTime         @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt           DateTime         @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  email               String?
  name                String?
  phone               String?
  description         String?
  metadata            Json             @default("{}")
  invoiceSettings     Json             @map("invoice_settings") @default("{}")
  shipping            Json             @default("{}")
  taxExempt           String?          @map("tax_exempt")
  taxIds              Json             @map("tax_ids") @default("[]")
  livemode            Boolean          @default(false)

  customerProfile     CustomerProfile  @relation(fields: [customerProfileId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  apiKeys             ApiKey[]
  checkoutSessions    StripeCheckoutSession[]

  @@index([customerProfileId], map: "idx_customers_customer_profile_id")
  @@map("customers")
  @@schema("public")
}

model ApiKey {
  id                String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid @map("api_keys_id")
  customerProfileId String       @map("customer_profiles_id") @db.Uuid
  customerId        String       @map("customers_id") @db.Uuid
  description       String?
  apiKeyHash        String       @map("api_key_hash")
  createdAt         DateTime     @default(now()) @map("created_at") @db.Timestamptz(6)
  lastUsedAt        DateTime?    @map("last_used_at") @db.Timestamptz(6)
  status            ApiKeyStatus @default(active)
  revokedAt         DateTime?    @map("revoked_at") @db.Timestamptz(6)
  updatedAt         DateTime     @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)

  customerProfile   CustomerProfile @relation(fields: [customerProfileId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  customer          Customer        @relation(fields: [customerId], references: [id], onUpdate: Cascade, onDelete: Cascade)

  @@index([customerProfileId], map: "idx_api_keys_customer_profile_id")
  @@index([customerId], map: "idx_api_keys_customer_id")
  @@map("api_keys")
  @@schema("public")
}

model StripeProduct {
  id          String   @id @map("products_id")
  name        String?
  description String?
  active      Boolean  @default(true)
  metadata    Json     @default("{}")
  images      String[] @default([])
  livemode    Boolean  @default(false)
  createdAt   DateTime @map("created_at") @db.Timestamptz(6)
  updatedAt   DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)

  prices StripePrice[]

  @@index([active], map: "products_active_idx")
  @@map("products")
  @@schema("public")
}

model StripePrice {
  id         String   @id @map("prices_id")
  productId  String   @map("product_id")
  active     Boolean  @default(true)
  currency   String   @db.Char(3)
  type       String
  recurring  Json?
  unitAmount BigInt?  @map("unit_amount")
  metadata   Json     @default("{}")
  livemode   Boolean  @default(false)
  createdAt  DateTime @map("created_at") @db.Timestamptz(6)
  updatedAt  DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)

  product StripeProduct @relation(fields: [productId], references: [id], onUpdate: Cascade, onDelete: Cascade)

  @@index([productId], map: "idx_prices_product")
  @@index([active], map: "prices_active_idx")
  @@index([type], map: "prices_type_idx")
  @@map("prices")
  @@schema("public")
}

model Subscription {
  id                  String           @id @map("subscriptions_id")
  customerProfileId   String           @map("customer_profiles_id") @db.Uuid
  status              String
  currentPeriodStart  DateTime         @map("current_period_start") @db.Timestamptz(6)
  currentPeriodEnd    DateTime         @map("current_period_end") @db.Timestamptz(6)
  cancelAtPeriodEnd   Boolean          @default(false) @map("cancel_at_period_end")
  cancelAt            DateTime?        @map("cancel_at") @db.Timestamptz(6)
  canceledAt          DateTime?        @map("canceled_at") @db.Timestamptz(6)
  metadata            Json             @default("{}")
  createdAt           DateTime         @map("created_at") @db.Timestamptz(6)
  updatedAt           DateTime         @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  livemode            Boolean          @default(false)

  customerProfile     CustomerProfile  @relation(fields: [customerProfileId], references: [id], onUpdate: Cascade, onDelete: Cascade)

  @@index([customerProfileId], map: "idx_subscriptions_customer_profile_id")
  @@index([status], map: "idx_subscriptions_status")
  @@map("subscriptions")
  @@schema("public")
}

model StripeCheckoutSession {
  id            String    @id @map("stripe_checkout_sessions_id")
  customerId    String    @map("customers_id") @db.Uuid
  paymentStatus String    @map("payment_status")
  mode          String
  amountTotal   BigInt?   @map("amount_total")
  currency      String
  createdAt     DateTime  @map("created_at") @db.Timestamptz(6)
  expiresAt     DateTime? @map("expires_at") @db.Timestamptz(6)
  url           String?
  metadata      Json      @default("{}")
  completedAt   DateTime? @map("completed_at") @db.Timestamptz(6)

  customer Customer @relation(fields: [customerId], references: [id], onUpdate: Cascade, onDelete: Cascade)

  @@map("stripe_checkout_sessions")
  @@schema("public")
}

model StripeWebhookEvent {
  id             Int       @id @default(autoincrement()) @map("stripe_webhook_events_id")
  eventId        String    @unique @map("event_id")
  eventType      String    @map("event_type")
  payload        Json
  processed      Boolean   @default(false)
  processedAt    DateTime? @map("processed_at") @db.Timestamptz(6)
  receivedAt     DateTime  @default(now()) @map("received_at") @db.Timestamptz(6)
  livemode       Boolean   @default(false)
  errorMessage   String?   @map("error_message")
  requestId      String?   @map("request_id")
  endpointSecret String?   @map("endpoint_secret")

  @@map("stripe_webhook_events")
  @@schema("public")
}

/* ============================================
   VENUES / STATE / MUSIC / SINGER / REQUESTS
   ============================================ */

model Venue {
  id                String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid @map("venues_id")
  customerProfileId String   @map("customer_profiles_id") @db.Uuid
  openkjVenueId     Int      @map("openkj_venue_id")
  urlName           String   @unique @map("url_name")
  acceptingRequests Boolean  @default(true) @map("accepting_requests")
  name              String
  address           String
  city              String
  state             String
  postalCode        String   @map("postal_code")
  country           String?
  phoneNumber       String?  @map("phone_number")
  website           String?
  latitude          Float?   @db.DoublePrecision
  longitude         Float?   @db.DoublePrecision
  createdAt         DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt         DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)

  customerProfile   CustomerProfile @relation(fields: [customerProfileId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  requests          Request[]
  favorites         SingerFavoriteVenue[]
  history           SingerRequestHistory[]

  @@index([customerProfileId], map: "idx_venues_customer_profile_id")
  @@map("venues")
  @@schema("public")
}

model State {
  customerProfileId String @id @map("customer_profiles_id") @db.Uuid
  serial            BigInt @default(1)

  customerProfile CustomerProfile @relation(fields: [customerProfileId], references: [id], onUpdate: Cascade, onDelete: Cascade)

  @@map("state")
  @@schema("public")
}

model System {
  id                String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid @map("systems_id")
  customerProfileId String   @map("customer_profiles_id") @db.Uuid
  openkjSystemId    Int      @map("openkj_system_id")
  name              String
  createdAt         DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt         DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)

  customerProfile CustomerProfile @relation(fields: [customerProfileId], references: [id], onUpdate: Cascade, onDelete: Cascade)

  @@unique([customerProfileId, openkjSystemId])
  @@index([customerProfileId, openkjSystemId], map: "systems_customer_openkj_idx")
  @@map("systems")
  @@schema("public")
}

model SongDb {
  songId             BigInt   @id @default(autoincrement()) @map("songdb_id")
  customerProfileId  String   @map("customer_profiles_id") @db.Uuid
  openkjSystemId     Int      @map("openkj_system_id")
  artist             String
  title              String
  combined           String
  normalizedCombined String   @map("normalized_combined")
  createdAt          DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt          DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)

  customerProfile CustomerProfile @relation(fields: [customerProfileId], references: [id], onUpdate: Cascade, onDelete: Cascade)

  @@unique([customerProfileId, openkjSystemId, combined])
  @@unique([customerProfileId, openkjSystemId, normalizedCombined])
  @@index([customerProfileId, openkjSystemId, artist], map: "idx_songdb_customer_system_artist")
  @@map("songdb")
  @@schema("public")
}

model SingerUser {
  id            String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name          String?
  email         String?  @unique
  emailVerified DateTime? @map("email_verified") @db.Timestamptz(6)
  image         String?
  createdAt     DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt     DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  passwordHash  String?  @map("password_hash")

  favoriteSongs  SingerFavoriteSong[]
  favoriteVenues SingerFavoriteVenue[]
  requestHistory SingerRequestHistory[]
  requests       Request[]

  @@map("singer_users")
  @@schema("public")
}

model Request {
  requestId        BigInt    @id @default(autoincrement()) @map("requests_id")
  venueId          String    @map("venues_id") @db.Uuid
  singerProfileId  String?   @map("singer_profiles_id") @db.Uuid
  artist           String
  title            String
  keyChange        Int       @default(0) @map("key_change")
  processed        Boolean   @default(false)
  requestedAt      DateTime  @default(now()) @map("requested_at") @db.Timestamptz(6)
  createdAt        DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt        DateTime  @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)

  venue       Venue      @relation(fields: [venueId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  singerUser  SingerUser? @relation(fields: [singerProfileId], references: [id], onUpdate: Cascade, onDelete: SetNull)

  @@map("requests")
  @@schema("public")
}

model SingerFavoriteSong {
  id               String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid @map("singer_favorite_songs_id")
  singerIdentityId String   @map("singer_identity_id") @db.Uuid
  artist           String?
  title            String?
  keyChange        Int      @default(0) @map("key_change")
  createdAt        DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt        DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)

  singer SingerUser @relation(fields: [singerIdentityId], references: [id], onUpdate: Cascade, onDelete: Cascade)

  @@map("singer_favorite_songs")
  @@schema("public")
}

model SingerRequestHistory {
  id               String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  singerIdentityId String   @map("singer_identity_id") @db.Uuid
  venueId          String   @map("venues_id") @db.Uuid
  artist           String
  title            String
  keyChange        Int      @default(0) @map("key_change")
  requestedAt      DateTime @default(now()) @map("requested_at") @db.Timestamptz(6)
  songFingerprint  String   @map("song_fingerprint")
  createdAt        DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt        DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)

  singer SingerUser @relation(fields: [singerIdentityId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  venue  Venue      @relation(fields: [venueId], references: [id], onUpdate: Cascade, onDelete: Cascade)

  @@map("singer_request_history")
  @@schema("public")
}

model SingerFavoriteVenue {
  singerIdentityId String   @map("singer_identity_id") @db.Uuid
  venueId          String   @map("venues_id") @db.Uuid
  createdAt        DateTime @default(now()) @map("created_at") @db.Timestamptz(6)

  singer SingerUser @relation(fields: [singerIdentityId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  venue  Venue      @relation(fields: [venueId], references: [id], onUpdate: Cascade, onDelete: Cascade)

  @@id([singerIdentityId, venueId])
  @@map("singer_favorite_venues")
  @@schema("public")
}

