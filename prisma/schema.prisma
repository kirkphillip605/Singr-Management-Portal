/// file: prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/* ===========================
   Core auth/session
   =========================== */

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime @db.Timestamptz(6)
  createdAt  DateTime @default(now()) @map("createdat") @db.Timestamptz(6)
  updatedAt  DateTime @default(now()) @updatedAt @map("updatedat") @db.Timestamptz(6)

  @@id([identifier, token])
  @@index([expires], map: "idx_verification_tokens_expires")
  @@map("verification_tokens")
}

model User {
  id            String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name          String?
  email         String         @unique
  emailVerified DateTime?      @map("emailverified") @db.Timestamptz(6)
  image         String?
  businessName  String?        @map("businessname")
  phoneNumber   String?        @map("phonenumber")
  passwordHash  String?        @map("passwordhash")
  createdAt     DateTime       @default(now()) @map("createdat") @db.Timestamptz(6)
  updatedAt     DateTime       @default(now()) @updatedAt @map("updatedat") @db.Timestamptz(6)

  accounts      Account[]
  customer      Customer?
  sessions      Session[]
  songDb        SongDb[]
  subscriptions Subscription[]
  venues        Venue[]        @relation("UserVenues")

  @@index([email], map: "idx_users_email")
  @@map("users")
}

model Account {
  id                 String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId             String   @map("userid") @db.Uuid
  type               String
  provider           String
  providerAccountId  String   @map("provideraccountid")
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?
  createdAt          DateTime @default(now()) @map("createdat") @db.Timestamptz(6)
  updatedAt          DateTime @default(now()) @updatedAt @map("updatedat") @db.Timestamptz(6)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId], map: "idx_accounts_userid")
  @@map("accounts")
}

model Session {
  id           String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  sessionToken String   @unique @map("sessiontoken")
  userId       String   @map("userid") @db.Uuid
  expires      DateTime @db.Timestamptz(6)
  createdAt    DateTime @default(now()) @map("createdat") @db.Timestamptz(6)
  updatedAt    DateTime @default(now()) @updatedAt @map("updatedat") @db.Timestamptz(6)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "idx_sessions_userid")
  @@map("sessions")
}

enum AdminLevel {
  support
  super_admin

  @@map("admin_level")
}

model AdminUser {
  id           String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name         String
  email        String      @unique
  passwordHash String      @map("passwordhash")
  createdAt    DateTime    @default(now()) @map("createdat") @db.Timestamptz(6)
  updatedAt    DateTime    @default(now()) @updatedAt @map("updatedat") @db.Timestamptz(6)
  adminLevel   AdminLevel  @default(support) @map("admin_level")

  @@map("admin_users")
}

/* ===========================
   Billing/Stripe
   =========================== */

model Customer {
  id               String   @id @db.Uuid
  stripeCustomerId String   @unique @map("stripecustomerid")
  createdAt        DateTime @default(now()) @map("createdat") @db.Timestamptz(6)
  updatedAt        DateTime @default(now()) @updatedAt @map("updatedat") @db.Timestamptz(6)
  email            String?
  name             String?
  phone            String?
  description      String?
  metadata         Json     @default("{}")
  invoice_settings Json     @default("{}")
  shipping         Json     @default("{}")
  tax_exempt       String?
  tax_ids          Json     @default("[]")
  livemode         Boolean  @default(false)
  data             Json     @default("{}")

  user User @relation(fields: [id], references: [id], onDelete: Cascade)

  apiKeys          ApiKey[]
  checkoutSessions StripeCheckoutSession[]

  @@index([stripeCustomerId], map: "idx_customers_stripecustomerid")
  @@map("customers")
}

model StripeProduct {
  id                  String   @id
  object              String?
  active              Boolean  @default(true)
  name                String?
  description         String?
  images              String[] @default([])
  metadata            Json     @default("{}")
  packageDimensions   Json?    @map("package_dimensions")
  shippable           Boolean?
  statementDescriptor String?  @map("statement_descriptor")
  taxCode             String?  @map("tax_code")
  unitLabel           String?  @map("unit_label")
  url                 String?
  created             DateTime @db.Timestamptz(6)
  updated             DateTime @default(now()) @db.Timestamptz(6)
  livemode            Boolean  @default(false)
  data                Json     @default("{}")

  prices StripePrice[]

  @@index([active], map: "products_active_idx")
  @@map("products")
}

model StripePrice {
  id                String        @id
  object            String?
  active            Boolean       @default(true)
  billingScheme     String?       @map("billing_scheme")
  currency          String        @db.Char(3)
  customUnitAmount  Json?         @map("custom_unit_amount")
  livemode          Boolean       @default(false)
  lookupKey         String?       @map("lookup_key")
  metadata          Json          @default("{}")
  nickname          String?
  product           String
  recurring         Json?
  taxBehavior       String?       @map("tax_behavior")
  tiersMode         String?       @map("tiers_mode")
  transformQuantity Json?         @map("transform_quantity")
  type              String
  unitAmount        BigInt?       @map("unit_amount")
  unitAmountDecimal String?       @map("unit_amount_decimal")
  created           DateTime      @db.Timestamptz(6)
  updated           DateTime      @default(now()) @db.Timestamptz(6)
  data              Json          @default("{}")

  productRelation StripeProduct @relation(fields: [product], references: [id], onDelete: Cascade)

  @@index([product], map: "idx_prices_product")
  @@index([active], map: "prices_active_idx")
  @@index([type], map: "prices_type_idx")
  @@map("prices")
}

model StripeWebhookEvent {
  id             Int       @id @default(autoincrement())
  eventId        String    @unique @map("event_id")
  payload        Json
  receivedAt     DateTime  @default(now()) @map("received_at") @db.Timestamptz(6)
  processed      Boolean   @default(false)
  processedAt    DateTime? @map("processed_at") @db.Timestamptz(6)
  errorMessage   String?   @map("error_message")
  apiVersion     String?   @map("api_version")
  eventType      String    @map("event_type")
  livemode       Boolean   @default(false)
  requestId      String?   @map("request_id")
  endpointSecret String?   @map("endpoint_secret")

  @@index([eventType], map: "idx_stripe_webhook_events_type")
  @@index([processed], map: "idx_stripe_webhook_events_processed")
  @@index([receivedAt], map: "idx_stripe_webhook_events_received_at")
  @@map("stripe_webhook_events")
}

model Subscription {
  id                 String   @id
  object             String?
  userId             String   @map("user_id") @db.Uuid
  status             String
  currentPeriodStart DateTime @map("current_period_start") @db.Timestamptz(6)
  currentPeriodEnd   DateTime @map("current_period_end") @db.Timestamptz(6)
  cancelAtPeriodEnd  Boolean  @map("cancel_at_period_end") @default(false)
  cancelAt           DateTime? @map("cancel_at") @db.Timestamptz(6)
  canceledAt         DateTime? @map("canceled_at") @db.Timestamptz(6)
  trialStart         DateTime? @map("trial_start") @db.Timestamptz(6)
  trialEnd           DateTime? @map("trial_end") @db.Timestamptz(6)
  metadata           Json     @default("{}")
  created            DateTime @db.Timestamptz(6)
  updated            DateTime @default(now()) @db.Timestamptz(6)
  livemode           Boolean  @default(false)
  data               Json     @default("{}")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "idx_subscriptions_user_id")
  @@index([status], map: "idx_subscriptions_status")
  @@map("subscriptions")
}

model StripeCheckoutSession {
  id            String    @id
  customerId    String    @map("customer_id") @db.Uuid
  paymentStatus String    @map("payment_status")
  mode          String
  amountTotal   BigInt?   @map("amount_total")
  currency      String
  created       DateTime  @db.Timestamptz(6)
  expiresAt     DateTime? @map("expires_at") @db.Timestamptz(6)
  url           String?
  metadata      Json      @default("{}")
  completedAt   DateTime? @map("completed_at") @db.Timestamptz(6)

  customer Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)

  @@index([customerId], map: "idx_checkout_sessions_customer_id")
  @@map("stripe_checkout_sessions")
}

model ApiKey {
  id          String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  customerId  String       @map("customerid") @db.Uuid
  description String?
  apiKeyHash  String       @map("apikeyhash")
  createdAt   DateTime     @default(now()) @map("createdat") @db.Timestamptz(6)
  lastUsedAt  DateTime?    @map("lastusedat") @db.Timestamptz(6)
  status      ApiKeyStatus @default(active)
  revokedAt   DateTime?    @map("revokedat") @db.Timestamptz(6)
  updatedAt   DateTime     @default(now()) @updatedAt @map("updatedat") @db.Timestamptz(6)

  customer Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)

  @@index([customerId], map: "idx_api_keys_customerid")
  @@map("api_keys")
}

/* ===========================
   Venues, state, requests, music catalog
   =========================== */

model Venue {
  id                String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId            String    @map("userid") @db.Uuid
  openKjVenueId     Int       @default(autoincrement()) @map("openkj_venue_id")
  urlName           String    @map("urlname")
  acceptingRequests Boolean   @default(true) @map("acceptingrequests")
  hereplaceid       String?   @unique(map: "idx_venues_hereplaceid")
  name              String
  address           String?
  city              String?
  state             String?
  stateCode         String?   @map("statecode") @db.VarChar(5)
  postalCode        String?   @map("postalcode")
  country           String?
  countryCode       String?   @map("countrycode") @db.VarChar(3)
  phoneNumber       String?   @map("phonenumber") @db.VarChar(20)
  website           String?
  latitude          Float?
  longitude         Float?
  createdAt         DateTime  @default(now()) @map("createdat") @db.Timestamptz(6)
  updatedAt         DateTime  @default(now()) @updatedAt @map("updatedat") @db.Timestamptz(6)

  // relations
  requests Request[]
  states   State[]
  user     User      @relation("UserVenues", fields: [userId], references: [id], onDelete: Cascade)

  // back-relations from singer_* tables
  singerFavoriteVenues  SingerFavoriteVenue[]  @relation("VenueSingerFavoriteVenues")
  singerRequestHistory  SingerRequestHistory[] @relation("VenueSingerRequestHistory")

  @@unique([userId, name, address], map: "venues_userid_name_address_key")
  @@unique([userId, urlName], map: "venues_userid_urlname_key")
  @@unique([userId, openKjVenueId], map: "venues_userid_openkj_venue_id_key")
  @@index([userId], map: "idx_venues_userid")
  @@index([userId, urlName], map: "idx_venues_user_urlname")
  @@index([userId, openKjVenueId], map: "idx_venues_user_openkj_id")
  @@index([address], map: "idx_venues_address")
  @@index([name], map: "idx_venues_name")
  @@index([city], map: "idx_venues_city")
  @@index([latitude, longitude], map: "idx_venues_location_brin", type: Brin)
  @@index([countryCode, stateCode, city], map: "idx_venues_region")
  @@map("venues")
}

model State {
  venueId   String   @map("venueid") @db.Uuid
  systemId  Int      @default(0) @map("system_id")
  accepting Boolean  @default(false)
  serial    Int      @default(1)
  createdAt DateTime @default(now()) @map("createdat") @db.Timestamptz(6)
  updatedAt DateTime @default(now()) @updatedAt @map("updatedat") @db.Timestamptz(6)

  venue Venue @relation(fields: [venueId], references: [id], onDelete: Cascade)

  @@id([venueId, systemId])
  @@map("state")
}

model SongDb {
  songId             BigInt   @id @default(autoincrement()) @map("song_id")
  userId             String   @map("user_id") @db.Uuid
  systemId           Int      @default(0) @map("system_id")
  artist             String   @db.VarChar(255)
  title              String   @db.VarChar(255)
  combined           String   @db.VarChar(255)
  normalizedCombined String   @map("normalized_combined") @db.VarChar(255)
  createdAt          DateTime @default(now()) @map("createdat") @db.Timestamptz(6)
  updatedAt          DateTime @default(now()) @updatedAt @map("updatedat") @db.Timestamptz(6)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, systemId, combined], map: "songdb_user_id_system_id_combined_key")
  @@unique([userId, systemId, normalizedCombined], map: "songdb_user_id_system_id_normalized_combined_key")
  @@index([userId, systemId, artist], map: "idx_songdb_user_system_artist")
  @@index([userId, systemId, title], map: "idx_songdb_user_system_title")
  @@index([userId, systemId, normalizedCombined], map: "idx_songdb_user_system_normcombined")
  @@map("songdb")
}

model Request {
  requestId BigInt   @id @default(autoincrement()) @map("request_id")
  venueId   String   @map("venueid") @db.Uuid
  systemId  Int      @default(0) @map("system_id")
  artist    String
  title     String
  singer    String?
  keyChange Int      @default(0) @map("key_change")
  createdAt DateTime @default(now()) @map("createdat") @db.Timestamptz(6)
  processed Boolean  @default(false)
  singerId  String?  @map("singer_id") @db.Uuid
  
  /// Legacy alias field for backward compatibility.
  /// DB computes this from createdAt (GENERATED ALWAYS ... STORED).
  /// We mark it as dbgenerated so Prisma doesn't try to set it on writes.
  requestTime DateTime @map("request_time") @default(dbgenerated()) @db.Timestamptz(6)
  
  venue  Venue       @relation(fields: [venueId], references: [id], onDelete: Cascade)
  singerUser SingerUser? @relation(fields: [singerId], references: [id], onDelete: Cascade)

  @@map("requests")
}

/* ===========================
   Singer tables
   =========================== */

model SingerUser {
  id           String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name         String
  email        String
  phone        String?
  passwordHash String   @map("passwordhash")
  createdAt    DateTime @default(now()) @map("createdat") @db.Timestamptz(6)
  updatedAt    DateTime @default(now()) @updatedAt @map("updatedat") @db.Timestamptz(6)

  favoriteSongs  SingerFavoriteSong[]
  favoriteVenues SingerFavoriteVenue[]
  requestHistory SingerRequestHistory[]
  requests        Request[]

  @@map("singer_users")
}

model SingerFavoriteSong {
  id        String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  singerId  String  @map("singer_id") @db.Uuid
  artist    String?
  title     String?
  keyChange Int     @default(0) @map("key_change")

  singer SingerUser @relation(fields: [singerId], references: [id], onDelete: Cascade)

  @@map("singer_favorite_songs")
  // SQL unique index exists (expression on lower()) but cannot be represented here.
}

model SingerRequestHistory {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  singerId    String   @map("singer_id") @db.Uuid
  venueId     String   @map("venue_id") @db.Uuid
  artist      String
  title       String
  keyChange   Int      @default(0) @map("key_change")
  requestedAt DateTime @default(now()) @map("requestedat") @db.Timestamptz(6)

  songFingerprint String @map("song_fingerprint") @default(dbgenerated()) @db.Text

  singer SingerUser @relation(fields: [singerId], references: [id], onDelete: Cascade)
  venue  Venue      @relation("VenueSingerRequestHistory", fields: [venueId], references: [id], onDelete: Cascade)

  @@map("singer_request_history")
  // Note: DB indexes exist; not all can be modeled (e.g., BRIN).
}

model SingerFavoriteVenue {
  singerId String   @map("singer_id") @db.Uuid
  venueId  String   @map("venue_id")  @db.Uuid
  createdAt DateTime @default(now())  @map("createdat") @db.Timestamptz(6)

  singer SingerUser @relation(fields: [singerId], references: [id], onDelete: Cascade)
  venue  Venue      @relation("VenueSingerFavoriteVenues", fields: [venueId], references: [id], onDelete: Cascade)

  @@id([singerId, venueId])
  @@map("singer_favorite_venues")
}

/* ===========================
   Enums
   =========================== */

enum PricingType {
  one_time
  recurring

  @@map("pricingtype")
}

enum PricingInterval {
  day
  week
  month
  year

  @@map("pricinginterval")
}

enum ApiKeyStatus {
  active
  revoked
  expired
  suspended

  @@map("apikeystatus")
}
